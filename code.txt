from tkinter import *
import tkinter as tk
from tkinter import filedialog, messagebox
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier, BaggingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import numpy as np
import lightgbm as lgb
import xgboost as xgb
from sklearn.metrics import precision_score, recall_score, f1_score
from sklearn.linear_model import LogisticRegression


global filename
global df, X_train, X_test, y_train, y_test
global lgb_model

def upload():
    global filename, df
    filename = filedialog.askopenfilename(initialdir="dataset")
    pathlabel.config(text=filename)
    df = pd.read_csv(filename)
    
    # Replace '?' with NaN
    df.replace('?', np.nan, inplace=True)

    # Fill missing values with mode for each column
    df.fillna(df.mode().iloc[0], inplace=True)
    
    text.delete('1.0', END)
    text.insert(END, 'Dataset loaded\n')
    text.insert(END, "Dataset Size: " + str(len(df)) + "\n")

def splitdataset(): 
    global df, X_train, X_test, y_train, y_test

    # Encode string columns to numerical values
    label_encoder = LabelEncoder()
    for column in df.columns:
        if df[column].dtype == 'object':
            df[column] = label_encoder.fit_transform(df[column])

    X = np.array(df.drop(["drugName"], axis=1))
    y = np.array(df["drugName"])
   
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)    
    # Display dataset split information
    text.delete('1.0', END)
    text.insert(END, "Dataset split\n")
    text.insert(END, "Splitted Training Size for Machine Learning : " + str(len(X_train)) + "\n")
    text.insert(END, "Splitted Test Size for Machine Learning    : " + str(len(X_test)) + "\n")
    
    # Display shapes of X_train, X_test, y_train, y_test
    text.insert(END, "\nShape of X_train: " + str(X_train.shape) + "\n")
    text.insert(END, "Shape of X_test: " + str(X_test.shape) + "\n")
    text.insert(END, "Shape of y_train: " + str(y_train.shape) + "\n")
    text.insert(END, "Shape of y_test: " + str(y_test.shape) + "\n\n")


def LR():
    global lr_acc, lr_precision, lr_recall, lr_f1
    lr = LogisticRegression()
    lr.fit(X_train, y_train)
    y_pred = lr.predict(X_test)
    lr_acc = accuracy_score(y_test, y_pred)
    lr_precision = precision_score(y_test, y_pred, average='weighted')
    lr_recall = recall_score(y_test, y_pred, average='weighted')
    lr_f1 = f1_score(y_test, y_pred, average='weighted')
    text.delete('1.0', END)

    result_text = f'Accuracy for Logistic Regression is {lr_acc * 100}%\n'
    result_text += f'Precision for Logistic Regression is {lr_precision}\n'
    result_text += f'Recall for Logistic Regression is {lr_recall}\n'
    result_text += f'F1 Score for Logistic Regression is {lr_f1}\n'
    text.insert(END, result_text)


def RC():
    pass

def mnb():
    pass

def SGDC():
    pass

def SVC1():
    pass

def Perceptron1():
    pass

def plot_bar_graph():
    algorithms = ['AdaBoost', 'Decision Tree', 'Gradient Boosting', 'Bagging', 'XGBoost', 'LightGBM']
    accuracies = [ada_acc * 100, dt_acc * 100, gb_acc * 100, bg_acc * 100, xgb_acc * 100, lgb_acc * 100]
    colors = ['blue', 'orange', 'green', 'red', 'purple', 'cyan']
    
    plt.bar(algorithms, accuracies, color=colors)
    plt.xlabel('Algorithms')
    plt.ylabel('Accuracy (%)')
    plt.title('Accuracy of Machine Learning Algorithms')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def predict():
    global lgb_model
    # Open file manager to select CSV file
    filename = filedialog.askopenfilename(title="Select CSV file", filetypes=[("CSV files", "*.csv")])

    if filename:
        # Read the selected CSV file
        input_data = pd.read_csv(filename)

        # Fill missing values with mode for each column
        input_data.fillna(input_data.mode().iloc[0], inplace=True)

        # Preprocess input data (if needed)
        label_encoder = LabelEncoder()
        for column in input_data.columns:
            if input_data[column].dtype == 'object':
                input_data[column] = label_encoder.fit_transform(input_data[column])

        # Perform prediction using LightGBM model
        y_pred = np.argmax(lgb_model.predict(input_data), axis=1)

        # Display the prediction result
        if y_pred[0] == 1:
            text.insert(END,"Coronary Heart Disease Detected" )

            messagebox.showinfo("Prediction Result", "Coronary Heart Disease Detected")
        else:
            messagebox.showinfo("Prediction Result", "Coronary Heart Disease Not Detected")


main = tk.Tk()
main.title("Drug Recommendation System based on Sentiment Analysis of Drug Reviews using Machine Learning") 
main.geometry("1600x1500")

font = ('times', 16, 'bold')
title = tk.Label(main, text='Drug Recommendation System based on Sentiment Analysis of Drug Reviews using Machine Learning',font=("times"))
title.config(bg='Dark Blue', fg='white')
title.config(font=font)           
title.config(height=3, width=145)
title.place(x=0, y=5)

font1 = ('times', 12, 'bold')
text = tk.Text(main, height=20, width=180)
scroll = tk.Scrollbar(text)
text.configure(yscrollcommand=scroll.set)
text.place(x=50, y=120)
text.config(font=font1)

font1 = ('times', 13, 'bold')
uploadButton = tk.Button(main, text="Upload Dataset", command=upload, bg="sky blue", width=15)
uploadButton.place(x=50, y=600)
uploadButton.config(font=font1)

pathlabel = tk.Label(main)
pathlabel.config(bg='DarkOrange1', fg='white')  
pathlabel.config(font=font1)           
pathlabel.place(x=250, y=600)

splitButton = tk.Button(main, text="Split Dataset", command=splitdataset, bg="light green", width=15)
splitButton.place(x=450, y=600)
splitButton.config(font=font1)

LogesticRegression = tk.Button(main, text="LogesticRegression", command=LR, bg="lightgrey", width=15)
LogesticRegression.place(x=50, y=650)
LogesticRegression.config(font=font1)

RidgeClassifier = tk.Button(main, text="RidgeClassifier", command=RC, bg="pink", width=15)
RidgeClassifier.place(x=250, y=650)
RidgeClassifier.config(font=font1)

MultinomialNB = tk.Button(main, text="MultinomialNB", command=mnb, bg="yellow", width=15)
MultinomialNB.place(x=450, y=650)
MultinomialNB.config(font=font1)

SGDClassifier = tk.Button(main, text="SGDClassifier", command=SGDC, bg="lightgreen", width=15)
SGDClassifier.place(x=650, y=650)
SGDClassifier.config(font=font1)

LinearSVC = tk.Button(main, text="LinearSVC", command=SVC1, bg="lightblue", width=15)
LinearSVC.place(x=850, y=650)
LinearSVC.config(font=font1)

Perceptron = tk.Button(main, text="Perceptron", command=Perceptron1, bg="orange", width=15)
Perceptron.place(x=1050, y=650)
Perceptron.config(font=font1)

plotButton = tk.Button(main, text="Plot Results", command=plot_bar_graph, bg="lightgrey", width=15)
plotButton.place(x=50, y=700)
plotButton.config(font=font1)

predict_button = tk.Button(main, text="Prediction", command=predict, bg="orange", width=15)
predict_button.place(x=250, y=700)
predict_button.config(font=font1)

main.config(bg='#32d1a7')
main.mainloop()
